list_word <- list(NA)
list_word[[1]] <- paste0(letters,my_word)
for (i in 2:(nchar(my_word)+1)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i-1) <- letters
}
vec_word_delete <- unlist(list_word)
delete_candidate <- vec_word_delete[!is.na(match(vec_word_delete,unlist(tesseract_vec_100)) > 0)]
# substitution
list_word <- list(NA)
for (j in 1:nchar(my_word)) {
list_word[[j]] <- my_word
stri_sub(list_word[[j]],j,j) <- letters
}
vec_word_substitute <- unlist(list_word)
substitute_candidate <- vec_word_substitute[!is.na(match(vec_word_substitute,unlist(tesseract_vec_100)) > 0)]
# reversal
list_word <- list(NA)
for (i in 1:(nchar(my_word)-1)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i) <- stri_sub(my_word,i+1,i+1)
stri_sub(list_word[[i]],i+1,i+1) <- stri_sub(my_word,i,i)
}
vec_word_reversal <- unlist(list_word)
reversal_candidate <- vec_word_reversal[!is.na(match(vec_word_reversal,unlist(tesseract_vec_100)) > 0)]
list_candidate[[1]] <- unique(delete_candidate)
list_candidate[[2]] <- unique(substitute_candidate)
list_candidate[[3]] <- unique(insert_candidate)
list_candidate[[4]] <- unique(reversal_candidate)
return(list_candidate)
}
candidate("ank")
candidate <- function(my_word){
list_candidate <- list(NA)
# insertion
list_word <- list(NA)
for (i in 1:nchar(my_word)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i) <- ""
}
vec_word_insert <- unlist(list_word)
insert_candidate <- vec_word_insert[!is.na(match(vec_word_insert,unlist(tesseract_vec_100)) > 0)]
# Deletion
list_word <- list(NA)
list_word[[1]] <- paste0(letters,my_word)
for (i in 2:(nchar(my_word)+1)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i-1) <- letters
}
vec_word_delete <- unlist(list_word)
delete_candidate <- vec_word_delete[!is.na(match(vec_word_delete,unlist(tesseract_vec_100)) > 0)]
# substitution
list_word <- list(NA)
for (j in 1:nchar(my_word)) {
list_word[[j]] <- my_word
stri_sub(list_word[[j]],j,j) <- letters
}
vec_word_substitute <- unlist(list_word)
substitute_candidate <- vec_word_substitute[!is.na(match(vec_word_substitute,unlist(tesseract_vec_100)) > 0)]
# reversal
list_word <- list(NA)
for (i in 1:(nchar(my_word)-1)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i) <- stri_sub(my_word,i+1,i+1)
stri_sub(list_word[[i]],i+1,i+1) <- stri_sub(my_word,i,i)
}
vec_word_reversal <- unlist(list_word)
reversal_candidate <- vec_word_reversal[!is.na(match(vec_word_reversal,unlist(tesseract_vec_100)) > 0)]
list_candidate[[1]] <- unique(insert_candidate)
list_candidate[[2]] <- unique(delete_candidate)
list_candidate[[3]] <- unique(substitute_candidate)
list_candidate[[4]] <- unique(reversal_candidate)
return(list_candidate)
}
candidate("ank")
candidate <- function(my_word){
list_candidate <- list(NA)
# insertion
list_word <- list(NA)
for (i in 1:nchar(my_word)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i) <- ""
}
vec_word_insert <- unlist(list_word)
insert_candidate <- vec_word_insert[!is.na(match(vec_word_insert,unlist(tesseract_vec_100)) > 0)]
# Deletion
list_word <- list(NA)
list_word[[1]] <- paste0(letters,my_word)
for (i in 2:(nchar(my_word)+1)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i-1) <- letters
}
vec_word_delete <- unlist(list_word)
delete_candidate <- vec_word_delete[!is.na(match(vec_word_delete,unlist(tesseract_vec_100)) > 0)]
# substitution
list_word <- list(NA)
for (i in 1:nchar(my_word)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i) <- letters
}
vec_word_substitute <- unlist(list_word)
substitute_candidate <- vec_word_substitute[!is.na(match(vec_word_substitute,unlist(tesseract_vec_100)) > 0)]
# reversal
list_word <- list(NA)
for (i in 1:(nchar(my_word)-1)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i) <- stri_sub(my_word,i+1,i+1)
stri_sub(list_word[[i]],i+1,i+1) <- stri_sub(my_word,i,i)
}
vec_word_reversal <- unlist(list_word)
reversal_candidate <- vec_word_reversal[!is.na(match(vec_word_reversal,unlist(tesseract_vec_100)) > 0)]
list_candidate[[1]] <- unique(insert_candidate)
list_candidate[[2]] <- unique(delete_candidate)
list_candidate[[3]] <- unique(substitute_candidate)
list_candidate[[4]] <- unique(reversal_candidate)
return(list_candidate)
}
candidate("ank")
vec_z <- c("abc","aa")
any("aa" == vec_z)
any(vec_z == "aa")
source("../lib/candidate.R")
length(candidate("ank"))
load("../output/tesseract_logical.RData")
tesseract_if_clean_100[[1]]
tesseract_vec_100[[1]]
which(tesseract_if_clean_100 == "bank")
which(tesseract_if_clean_100 == "rate")
which(tesseract_if_clean_100[[1]] == "rate")
which(unlist(tesseract_if_clean_100[[1]]) == "rate")
which(tesseract_vec_100[[1]]) == "rate")
which(tesseract_vec_100[[1]] == "rate")
which(unlist(tesseract_vec_100[[1]]) == "rate")
which(unlist(tesseract_vec_100) == "rate")
tesseract_vec_100[[1]]
character(0)
character(0) *2
candidate(":")
candidate <- function(my_word){
list_candidate <- list(NA)
# insertion
list_word <- list(NA)
for (i in 1:nchar(my_word)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i) <- ""
}
vec_word_insert <- unlist(list_word)
insert_candidate <- vec_word_insert[!is.na(match(vec_word_insert,unlist(tesseract_vec_100)) > 0)]
# Deletion
list_word <- list(NA)
list_word[[1]] <- paste0(letters,my_word)
for (i in 2:(nchar(my_word)+1)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i-1) <- letters
}
vec_word_delete <- unlist(list_word)
delete_candidate <- vec_word_delete[!is.na(match(vec_word_delete,unlist(tesseract_vec_100)) > 0)]
# substitution
list_word <- list(NA)
for (i in 1:nchar(my_word)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i) <- letters
}
vec_word_substitute <- unlist(list_word)
substitute_candidate <- vec_word_substitute[!is.na(match(vec_word_substitute,unlist(tesseract_vec_100)) > 0)]
# reversal
list_word <- list(NA)
for (i in 1:(nchar(my_word)-1)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i) <- stri_sub(my_word,i+1,i+1)
stri_sub(list_word[[i]],i+1,i+1) <- stri_sub(my_word,i,i)
}
vec_word_reversal <- unlist(list_word)
reversal_candidate <- vec_word_reversal[!is.na(match(vec_word_reversal,unlist(tesseract_vec_100)) > 0)]
list_candidate[[1]] <- unique(insert_candidate)
list_candidate[[2]] <- unique(delete_candidate)
list_candidate[[3]] <- unique(substitute_candidate)
list_candidate[[4]] <- unique(reversal_candidate)
return(list_candidate)
# output
return(
list(
Insertion = list_candidate[[1]],
Deletion = list_candidate[[2]],
Substitution = list_candidate[[3]],
Reversion = list_candidate[[4]]
)
)
}
temp.result = candidate("ank")
temp.result$Insertion
temp.result
list("abc", "bd")
names(list("abc", "bd"))
names(list("abc", "bd")) = "name"
names(temp.result)
names(temp.result) <- c("aa","bb","cc","dd")
temp.result
temp.result$aa
candidate <- function(my_word){
list_candidate <- list(NA)
# insertion
list_word <- list(NA)
for (i in 1:nchar(my_word)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i) <- ""
}
vec_word_insert <- unlist(list_word)
insert_candidate <- vec_word_insert[!is.na(match(vec_word_insert,unlist(tesseract_vec_100)) > 0)]
# Deletion
list_word <- list(NA)
list_word[[1]] <- paste0(letters,my_word)
for (i in 2:(nchar(my_word)+1)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i-1) <- letters
}
vec_word_delete <- unlist(list_word)
delete_candidate <- vec_word_delete[!is.na(match(vec_word_delete,unlist(tesseract_vec_100)) > 0)]
# substitution
list_word <- list(NA)
for (i in 1:nchar(my_word)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i) <- letters
}
vec_word_substitute <- unlist(list_word)
substitute_candidate <- vec_word_substitute[!is.na(match(vec_word_substitute,unlist(tesseract_vec_100)) > 0)]
# reversal
list_word <- list(NA)
for (i in 1:(nchar(my_word)-1)) {
list_word[[i]] <- my_word
stri_sub(list_word[[i]],i,i) <- stri_sub(my_word,i+1,i+1)
stri_sub(list_word[[i]],i+1,i+1) <- stri_sub(my_word,i,i)
}
vec_word_reversal <- unlist(list_word)
reversal_candidate <- vec_word_reversal[!is.na(match(vec_word_reversal,unlist(tesseract_vec_100)) > 0)]
list_candidate[[1]] <- unique(insert_candidate)
list_candidate[[2]] <- unique(delete_candidate)
list_candidate[[3]] <- unique(substitute_candidate)
list_candidate[[4]] <- unique(reversal_candidate)
names(list_candidate) <- c("insert", "delete", "substitute", "reversal")
return(list_candidate)
}
temp.result <- candidate("ank")
temp.result$insert
temp.result
temp.result[[1]]
temp.result == character(0)
temp.result[[4]] == character(0)
temp.result[[3]] == character(0)
which(temp.result == character(0))
which(unlist(temp.result) == character(0))
temp.result[[4]]
library(rebus.base)
source('../lib/ifCleanToken.R')
### only process one of the files in the folder as an example, in your project, you need to use all the files
current_file_name <- sub(".txt","",file_name_vec[5])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
clean_tesseract_txt <- paste(current_tesseract_txt, collapse = " ") #7193 nchar
## detect tesseract word error
tesseract_vec <- str_split(clean_tesseract_txt," ")[[1]] #1124 tokens
tesseract_if_clean <- unlist(lapply(tesseract_vec,ifCleanToken)) # source code of ifCleanToken is in lib folder
sum(tesseract_if_clean == F)
tesseract_vec[!tesseract_if_clean]
library(rebus.base)
source('../lib/ifCleanToken.R')
### only process one of the files in the folder as an example, in your project, you need to use all the files
current_file_name <- sub(".txt","",file_name_vec[16])
## read the ground truth text
current_ground_truth_txt <- readLines(paste("../data/ground_truth/",current_file_name,".txt",sep=""), warn=FALSE)
## read the tesseract text
current_tesseract_txt <- readLines(paste("../data/tesseract/",current_file_name,".txt",sep=""), warn=FALSE)
clean_tesseract_txt <- paste(current_tesseract_txt, collapse = " ") #7193 nchar
## detect tesseract word error
tesseract_vec <- str_split(clean_tesseract_txt," ")[[1]] #1124 tokens
tesseract_if_clean <- unlist(lapply(tesseract_vec,ifCleanToken)) # source code of ifCleanToken is in lib folder
sum(tesseract_if_clean == F)
tesseract_vec[!tesseract_if_clean]
sum(unlist(tesseract_if_clean_100) == 0)
sum(unlist(tesseract_if_clean_100) == 1)
load("../output/freq.RData")
freq
sum(freq)/5
length(unlist(tesseract_if_clean_100))
which(unlist(tesseract_if_clean_100) == 0)
typo_vec <- unlist(tesseract_vec_100)
length(typo_vec)
typo_vec <- unlist(tesseract_vec_100)[which(unlist(tesseract_if_clean_100) == 0)]
length(typo_vec)
typo_vec
which(typo_vec != letters)
"aaa" == letters
any("aaa" == letters)
any(strsplit("aaa") != letters)
any(str_split("aaa") != letters)
?strsplit
strsplit("aaa","")
any(strsplit("aaa","") != letters)
any(strsplit("aa4","") != letters)
any(strsplit("4","") != letters)
any(strsplit("4","") == letters)
strsplit("aaa", "")
strsplit("aaa", "") != letters
strsplit("aaa", "")[[1]] != letters
strsplit("aaa", "")
strsplit("aaa", "")[[1]]
strsplit("aaa", "")[[1]] != letters
any(strsplit("aaa", "")[[1]] != letters)
any(strsplit("aaa", "")[[1]][1] != letters)
any(strsplit("aaa", "")[[1]][1] != letters[1])
any(strsplit("aaa", "")[[1]][1] != c("a","b","c"))
any("a", c("a","b","c"))
any(c("a"), c("a","b","c"))
strsplit("aaa", "")
strsplit("aaa", "") != "a"
strsplit("aaa", "") != c("a","a","a")
source('../lib/ifCleanToken.R')
tesseract_if_clean <- unlist(lapply(tesseract_vec,ifCleanToken)) # source code of ifCleanToken is in lib folder
sum(tesseract_if_clean == F)
tesseract_vec[!tesseract_if_clean]
my_word = "ab!"
for (i in 1:length(strsplit(my_word, "")[[1]])) {
print(strsplit(my_word, "")[[1]][i] == letters)
}
sum(strsplit(my_word, "")[[1]][i] == letters)
sum(strsplit(my_word, "")[[1]][i] == letters)
sum(strsplit(my_word, "")[[1]][1] == letters)
sum(strsplit(my_word, "")[[1]][3] == letters)
my_word = "ab!"
i = 1
while (i <= length(strsplit(my_word, "")[[1]])) {
if (sum(strsplit(my_word, "")[[1]][i] == letters) == 0) {
return("FALSE")
} else {
return("TRUE")
}
}
aa <- function(my_word){
#my_word = "ab!"
i = 1
while (i <= length(strsplit(my_word, "")[[1]])) {
if (sum(strsplit(my_word, "")[[1]][i] == letters) == 0) {
return("FALSE")
} else {
return("TRUE")
}
}
}
aa("ab!")
#my_word = "ab!acd"
i = 1
sum(strsplit(my_word, "")[[1]][i] == letters) == 0
i = i + 1
i <= length(strsplit(my_word, "")[[1]])
sum(strsplit(my_word, "")[[1]][i] == letters) == 0
i = i + 1
sum(strsplit(my_word, "")[[1]][i] == letters) == 0
f
F
aa <- function(my_word){
#my_word = "ab!acd"
i = 1
while (i <= length(strsplit(my_word, "")[[1]])) {
if (sum(strsplit(my_word, "")[[1]][i] == letters) == 0) {
return(FALSE)
break
} else {
}
i = i + 1
}
return(TRUE)
}
aa("ab!")
aa("aba")
aa("ab!bcd")
letter_or_not <- function(my_word){
#my_word = "ab!acd"
i = 1
while (i <= length(strsplit(my_word, "")[[1]])) {
if (sum(strsplit(my_word, "")[[1]][i] == letters) == 0) {
return(FALSE)
break
} else {
}
i = i + 1
}
return(TRUE)
}
for (i in 1:length(typo_vec)) {
letter_if[i] <- letter_or_not(typo_vec[i])
}
letter_if <- c(NA)
for (i in 1:length(typo_vec)) {
letter_if[i] <- letter_or_not(typo_vec[i])
}
letter_if
length(letter_if)
typo_vec[letter_if]
tesseract_if_clean_100[[1]]
source('../lib/ifCleanToken.R')
tesseract_if_clean <- unlist(lapply(tesseract_vec,ifCleanToken)) # source code of ifCleanToken is in lib folder
sum(tesseract_if_clean == F)
##### Load 100 files and return tesseract_if_clean
current_tesseract_txt_100 <- list(NA)
clean_tesseract_txt_100 <- list(NA)
tesseract_vec_100 <- list(NA)
tesseract_if_clean_100 <- list(NA)
##### Load 100 files and return tesseract_if_clean
current_tesseract_txt_100 <- list(NA)
clean_tesseract_txt_100 <- list(NA)
tesseract_vec_100 <- list(NA)
tesseract_if_clean_100 <- list(NA)
for (i in 1:length(file_name_vec)) {
current_tesseract_txt_100[[i]] <- readLines(paste("../data/tesseract/",file_name_vec[i],sep=""), warn=FALSE)
clean_tesseract_txt_100[[i]] = paste(current_tesseract_txt_100[[i]], collapse = " ")
tesseract_vec_100[[i]] <- strsplit(unlist(clean_tesseract_txt_100[[i]])," ")
tesseract_if_clean_100[[i]] <- unlist(lapply(unlist(tesseract_vec_100[[i]]),ifCleanToken))
}
mat
freq
candidate("ank")
setwd("~/Documents/GitHub/Tremor-Data-Analysis/data")
#setwd("~/Documents/GitHub/Tremor-Data-Analysis/lib")
source("../lib/hertz_dataframe_tools.R")
# load 11 Firsthand csv and combine to one dataframe
dataFiles <- lapply(Sys.glob("20180708*.csv"), read.csv)
dt_bind <- dataFiles[[1]]
for (i in 2:12) {
dt_bind <- abind(dt_bind,dataFiles[[i]],along = 1)
}
library(tidyverse)
library(MASS)
library(ggplot2)
library(abind)
for (i in 2:12) {
dt_bind <- abind(dt_bind,dataFiles[[i]],along = 1)
}
dt_bind <- dataFiles[[1]]
# Each person with 2 mins record and fft using 1 second
hert <- get_hertz(dataFiles[[1]][1:(120*33),])
rm(list = ls())
# load 11 Firsthand csv and combine to one dataframe
dataFiles <- lapply(Sys.glob("20180708*.csv"), read.csv)
setwd("~/Documents/GitHub/Tremor-Data-Analysis/data/FIRSTHAND")
# load 11 Firsthand csv and combine to one dataframe
dataFiles <- lapply(Sys.glob("20180708*.csv"), read.csv)
# Each person with 2 mins record and fft using 1 second
hert <- get_hertz(dataFiles[[1]][1:(120*33),])
#setwd("~/Documents/GitHub/Tremor-Data-Analysis/lib")
source("../lib/hertz_dataframe_tools.R")
setwd("~/Documents/GitHub/Tremor-Data-Analysis/lib")
#setwd("~/Documents/GitHub/Tremor-Data-Analysis/lib")
source("../lib/hertz_dataframe_tools.R")
# Each person with 2 mins record and fft using 1 second
hert <- get_hertz(dataFiles[[1]][1:(120*33),])
dt_bind <- dataFiles[[1]]
for (i in 2:12) {
dt_bind <- abind(dt_bind,dataFiles[[i]],along = 1)
}
nrow(dt_bind)
nrow(dt_bind)/(120*33)
setwd("~/Documents/GitHub/Tremor-Data-Analysis/data/SECONDHAND")
# load 11 Secondhand csv and combine to one dataframe
dataFiles2 <- lapply(Sys.glob("2018071*.csv"), read.csv)
?SUB \
?SUB
28*28
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(survival)
dt <- data(lung)
summary(dt)
head(dt)
dt <- data("cancer")
dt <- data(cancer)
summary(dt)
head(dt)
library('survival')
data(lung)
lung
dt <- lung
rm(lung)
summary(dt)
head(dt)
dt$age_group <- "YOUNG"
dt$age_group[which(dt$age >= 65)] = "OLD"
dt$age_group
head(dt)
dt <- lung
dt$YOUNG <- 1
dt$OLD <- 1
dt$YOUNG[which(dt$age >= 65)] = 0
dt$OLD[which(dt$age < 65)] = 0
head(dt)
cox_fit = coxph(Surv(time,status)~OLD,data = dt)
dt <- lung
dt$OLD <- 1
dt$OLD[which(dt$age < 65)] = 0
head(dt)
cox_fit = coxph(Surv(time,status)~OLD,data = dt)
summary(cox_fit)
prop = cox.zph(cox1)
prop = cox.zph(cox_fit)
plot(prop)
dt$sex
dt$sex_group = ifelse(dt$sex==1,'Male','Female')
head(dt)
cox_fit2 = coxph(Surv(time,status) ~ OLD + sex_group, data = dt)
summary(cox2)
summary(cox_fit2)
